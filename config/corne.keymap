/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <5 4>;
            bindings = <&kp ESC>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <6 7>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q         &kp W            &kp E                     &kp R            &kp T    &kp Y          &kp U                 &kp I               &kp O             &hrm LBKT P                   &none
&none  &hrm LCTRL A  &hrm LEFT_ALT S  &hrm LEFT_SHIFT D         &hrm LEFT_WIN F  &kp G    &kp H          &hrm RIGHT_WIN J      &hrm RIGHT_SHIFT K  &hrm RIGHT_ALT L  &hrm RIGHT_CONTROL SEMICOLON  &none
&none  &kp Z         &kp X            &kp C                     &kp V            &kp B    &kp N          &hrm RIGHT_BRACKET M  &kp COMMA           &kp DOT           &hrm QUESTION BACKSLASH       &none
                                      &hrm LA(LSHFT) LG(SPACE)  &kp SPACE        &mo 2    &kp BACKSPACE  &mo 1                 &kp ENTER
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp LS(N1)    &kp LS(N2)    &kp LS(N3)    &kp LS(N4)    &kp LS(N5)    &kp LS(N6)     &kp LS(N7)     &kp LS(N8)            &kp LS(N9)            &kp LS(N0)             &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5        &kp MINUS      &kp EQUAL      &kp SINGLE_QUOTE      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none
&none  &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0        &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(SINGLE_QUOTE)  &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &trans
                                   &sl 3         &trans        &kp SPACE     &trans         &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp F11  &kp F12  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE    &kp HOME      &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &kp TILDE        &none
&none  &kp F1   &kp F2   &kp F3             &kp F4           &kp F5        &kp LEFT      &kp DOWN_ARROW  &kp UP        &kp RIGHT_ARROW  &kp PRINTSCREEN  &none
&none  &kp F6   &kp F7   &kp F8             &kp F9           &kp F10       &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_CLR_ALL   &none
                         &none              &trans           &none         &kp DELETE    &trans          &none
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans          &trans      &trans      &trans          &trans      &trans  &trans
&trans  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 0    &bt BT_PRV  &bt BT_NXT  &bt BT_PRV      &bt BT_NXT  &trans  &trans
&trans  &none         &trans        &trans        &trans        &trans          &trans      &trans      &trans          &trans      &trans  &trans
                                    &trans        &trans        &trans          &bt BT_CLR  &trans      &bt BT_CLR_ALL
            >;

            label = "Bluetooth";
        };
    };
};
